"######################################################################################
"################ MANAGED FILE ########################################################
"######################################################################################
"# This file should not be edited except in its original location of ~/config/vimrc
"######################################################################################
" BRYCE'S USAGE NOTES
" <leader> = <space> "
" Leader strategy is as follows:
"   Actions are grouped together into roughly similar ideas ((D)ebug, (J)ump, 
"   (L)oad, etc...). Each group is associated with a letter or key. 
"   For each group, there is a 'prime' action 
"   that will be triggered simply with <leader> followed by the group's letter
"   in lower case. The rest of the group's actions will be accessible using
"   <leader> followed by the group's letter in UPPER case, followed by another
"   descriptive letter.
"   Finally, some groups may contain a subprime action, this will be accessed
"   with <leader> followed by Ctrl + <groups letter>

if has('nvim')
  let g:nvim = 1
else 
  let g:nvim = 0
endif

set nocompatible              " be iMproved, required
filetype off                  " required
set termguicolors

" Plugins come from lazy for nvim now. No native vim plugins are supported 

" Custom Globals
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Path for where to find snippets
let g:snippet_path = expand('~/config/snippets/')
" Path where we should store temp data like c
if g:nvim
  let g:xdg_state_dir = $XDG_STATE_HOME . "/nvim/"
else
  let g:xdg_state_dir = $XDG_STATE_HOME . "/vim/"
endif

if !isdirectory(g:xdg_state_dir) 
  call mkdir(expand(g:xdg_state_dir), "p")
endif

" Basic config settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This lets us find our color configurations (see :help runtimepath)
verbose set runtimepath+=~/config/vim

let s:current_scheme_file = g:xdg_state_dir . "vim_current_scheme"
if filereadable(expand(s:current_scheme_file))
  execute "colorscheme " . readfile(expand(s:current_scheme_file))[0]
else
  colorscheme brycedcarter-cool-dark " use custom color scheme
endif

set backspace=2 " allow backspace to go over eol, indent, and start of insert
set colorcolumn=80 " show the 80th column as a guide
set cursorline " Highlight the line with the cursor
set encoding=utf-8 " use utf-8 encoding
set expandtab                   " Expand tabs into spaces. use CTLR+V->Tab for a real tab
set foldlevelstart=99 " start with no folding
set foldmethod=syntax " use syntax elements to define folding boundaries
set hidden " allow hiding modified buffers without saving
set history=1000 " remember lots of commands
set hlsearch " highlight search results
set incsearch " show search results while typing
set laststatus=2 " always show the status bar for all windows
set nolist " don't show visual whitespace by default
set listchars=tab:➤-,trail:·,extends:»,precedes:« " chars to show in place of whitespace
set lazyredraw                  " Redraw faster.
set number " show line numbers
set scrolloff=5                 " Keep min of N lines above/below cursor.
set shiftwidth=2                " Auto-indent 2 spaces each indent level. (used for C style files)
set showmatch                   " Show matching () {} etc..
set smarttab                    " Tabs and backspaces at the start of a line indent the line one level.
set sidescrolloff=10            " Keep min of N columns right/left cursor.
set smartindent                 " Maintains most indentation and adds extra level when nesting.
set splitright splitbelow       " Open splits below and to the right.
set synmaxcol=2000              " Only matches syntax on first N columns of each line.
set textwidth=80                " Hard wrap at N characters.
set timeout timeoutlen=1500 " wait 1.5s before canceling a partial command
set ttyfast                     " Smoother redrawing.
set undolevels=1000 " keep lots of undo
set viminfo='100,<500,%,h         " Adjust viminfo contents.
set virtualedit=block           " Allow the cursor to move to columns without text in block select mode
set wildignore=*.pyc      " Ignore generated files in the source tree.
set wildignorecase              " Tab completion is case-insensitive.
set wildmenu                    " Tab completion navigable menu is enabled.
set wildmode=list:longest,full  " Tab completion lists matches, then opens wildmenu on next <Tab>.
set formatoptions=cqronl " custom formatting
set diffopt=internal,filler,closeoff,vertical,algorithm:patience,linematch:50 " enable better 'patience' diff
set grepprg=rg\ --vimgrep\ --no-messages  " use rg for grepping
set grepformat=%f:%l:%c:%m " set grep format to match grep config  
set spell " enable spellcheck
set spellfile=~/.spellfile.utf-8.add " personal spelling dictionary
set spellsuggest=10 " limit the number of spelling suggestions




" Workarounds
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if $VIM_CRONTAB == "true"
set backupcopy=yes
endif

" Fixing up the grep command so that it can be used by our custom refactor
command! -nargs=+ Grep silent! :grep  <args> | redraw! | copen

set eventignore-=Syntax

" Custom functions and routines
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" For files with logical pairs such as .cpp and .h files, check if the pair
" exists and if so, open/show it
function ToggleIfPair()
  " This list is ordered... the first entry for which there is a matching pair
  " will be the one that is opened
  let file_pairs = [["cpp", "h"], ["cc", "h"], ["c", "h"]]
  let current_extension = expand("%:e")
  for pair in file_pairs
    for idx in [0, 1]
      if pair[idx] == current_extension
        let matching_extension = pair[(idx + 1)%2]
        let matching_filename = expand("%:p:r") . "." . matching_extension
        if filereadable(matching_filename)
          execute "edit " . matching_filename
          return
        endif 
      endif
    endfor
  endfor
  echo "No paired file found :-("
endfunction

" Function to source only if file exists --- from here 
" https://devel.tech/snippets/n/vIIMz8vZ/load-vim-source-files-only-if-they-exist
function! SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

" quickfix bindings modified from: https://vonheikemen.github.io/devlog/tools/vim-and-the-quickfix-list/
function! QuickfixMapping()
  " Go to the previous location and stay in the quickfix window
  nnoremap <buffer> K :cprev<CR>zz<C-w>w
  " Go to the next location and stay in the quickfix window
  nnoremap <buffer> J :cnext<CR>zz<C-w>w
  " Make the quickfix list modifiable
  nnoremap <buffer> <leader>u :set modifiable<CR>
  " Save the changes in the quickfix window
  nnoremap <buffer> <leader>w :cgetbuffer<CR>:cclose<CR>:copen<CR>
  " Begin the search and replace
  nnoremap <buffer> <leader>r :cdo s///g \| update<C-Left><C-Left><Left><Left><Left><Left>
  " Begin search and replace with result from previous leader-R in main window
  nnoremap <buffer> <leader>R :cdo s/<C-R>r//g \| update<C-Left><C-Left><Left><Left><Left>
endfunction


" Auto Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Resize splits on window resize.
augroup AutoResizeSplits
   autocmd!
   autocmd VimResized * exe "normal! \<c-w>="
augroup END

" install special bindings for the quickfix window
augroup quickfix_group
    autocmd!
    autocmd filetype qf call QuickfixMapping()
    " Auto open quickfix 
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost l* lwindow
augroup END


" Refresh teh xserver connection so that clipboard work in tmux
augroup xserver_referesh
  autocmd!
  " taking out for now becuase of delay
  "autocmd FocusGained * xrestore
augroup END

" Record the current color scheme so that it can be loaded on the next open
augroup remember_colorscheme
  autocmd!
  autocmd ColorScheme * call system('touch ' . s:current_scheme_file) | call writefile([ g:colors_name,], expand(s:current_scheme_file))
augroup END

" Markdown can use trailing whitespace to present things like new lines in lists
augroup disable_whitespace_removal_for_markdown
  autocmd!
  autocmd FileType markdown let g:EditorConfig_disable_rules = ['trim_trailing_whitespace']
augroup END


" Command Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 

" easier exit from insert mode
inoremap jk <esc>

" Auto closing of closures
inoremap (( ()<esc>i
inoremap ((<cr> ()<esc>i<cr><esc>k$a<cr>
inoremap [[ []<esc>i
inoremap [[<cr> []<esc>i<cr><esc>k$a<cr>
inoremap {{ {}<esc>i
inoremap {{<cr> {}<esc>i<cr><esc>k$a<cr>
inoremap "" ""<esc>i
inoremap '' ''<esc>i
inoremap `` ``<esc>i

" highlight clear
nnoremap <silent> <leader><cr> :noh<cr>

" movement for use in quickfix mode
nnoremap [q :cprev<CR>
nnoremap ]q :cnext<CR>

" improved spellcheck correction options view
nnoremap z= i<C-X>s

" LuaSnip template navigation
" Use Tab to expand and jump through snippets
imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 
smap <silent><expr> <Tab> luasnip#jumpable(1) ? '<Plug>luasnip-jump-next' : '<Tab>'

" Use Shift-Tab to jump backwards through snippets
imap <silent><expr> <S-Tab> luasnip#jumpable(-1) ? '<Plug>luasnip-jump-prev' : '<S-Tab>'
smap <silent><expr> <S-Tab> luasnip#jumpable(-1) ? '<Plug>luasnip-jump-prev' : '<S-Tab>'


" Ctrl
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 

" better pane navigation and creation 
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <C-Down> <C-W><C-J>
nnoremap <C-Up> <C-W><C-K>
nnoremap <C-Right> <C-W><C-L>
nnoremap <C-Left> <C-W><C-H>
" F-Key mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 

" Reload vimrc 
nnoremap <F1> :so $MYVIMRC<cr>

" Format current buffer
nnoremap <F4> :Format<CR>

" Run linter for file
nnoremap <F5> :TryLint<CR>


" LEADER raw
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 

" set the leader
let mapleader=" "

" Comment toggling
nnoremap <leader>/ <Plug>(comment_toggle_linewise_current)<CR>
vnoremap <leader>/ <Plug>(comment_toggle_linewise_visual)<CR>

" paren/wrapping tools
vnoremap <leader>( <esc>`>a)<esc>`<i(<esc>
vnoremap <leader>[ <esc>`>a]<esc>`<i[<esc>
vnoremap <leader>{ <esc>`>a}<esc>`<i{<esc>
vnoremap <leader>" <esc>`>a"<esc>`<i"<esc>
vnoremap <leader>' <esc>`>a'<esc>`<i'<esc>
vnoremap <leader>` <esc>`>a`<esc>`<i`<esc>

" quick toggle previous buffer
nnoremap <leader><tab> :b#<cr>
" quick cycle through buffers
nnoremap <tab> :bn<cr>
nnoremap <S-tab> :bp<cr>

" Swapping between pairs of logically connected files
nnoremap <silent> <leader>= :call ToggleIfPair()<cr>

" LEADER groups
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" See leader strategy above

" --- C --- Control/Settings
"  prime = UNDEFINED
"  C->w = Set snippet capture to work snippets dir
"  C->p = Set snippet capture to personal snippets dir
nnoremap <silent> <leader>Cw :SaveSnippetsToWork<cr>
nnoremap <silent> <leader>Cp :SaveSnippetsToPersonal<cr>

" --- D --- Debug/Diagnose
"  prime = show diagnostic information in floating panel
"  D->h = show highlighting info at the current location
"  D->H = show detailed 
"  D->n = Jump to the next diagnostic
"  D->N = Jump to the previous diagnostic
"  D->p = Jump to the previous
"  D->m = start profiling of all functions. NOTE: need to exit vim before
"  D->v = Use telescope to view all lsp diagnostic for the current buffer
"  results will be written to /tmp/vim.profile
nnoremap <leader>d :LspShowDiag<CR>
nnoremap <silent> <leader>Dh :Inspect<cr>
nnoremap <silent> <leader>DH :so $VIMRUNTIME/syntax/hitest.vim<cr>
nnoremap <silent> <leader>Dn :LspJumpDiagNext<CR>
nnoremap <silent> <leader>DN :LspJumpDiagPrev<CR>
nnoremap <leader>Dm :profile start /tmp/vim.profile<cr>:profile file *<cr>:profile func *<cr>
nnoremap <leader>Dv :Telescope diagnostics bufnr=0<CR>

" --- F --- Find
"  prime = start case insensitive regex find 
"  subprime = start a grep based search
"  F->h = use telescope to find a recent search
"  F->b = use telescope to do a live grep through open buffers
"  F->o = find semantic items using telescope and treesitter (outline search)
nnoremap <leader>f /\v\c
nnoremap <leader><c-f> :Telescope live_grep<cr>
nnoremap <leader>Fb :TelescopGrepOpenFiles<CR>
nnoremap <leader>Fh :Telescope search_history<cr>
nnoremap <leader>Fo :Telescope treesitter<cr>

" --- G --- Git
"  G->b = initiate a git blame
"  G->n = next git hunk
"  G->N = previous git hunk
"  G->v = view preview of hunk under the cursor
"  G->r = restore (discard) the changes in the hunk under the cursor
"  G->a = stage the changes in the hunk under the cursor
"  G->l = Get a git permalink to code under the cursor or currently selected
"  G->d = Start git diff
"  G->] = Jump to next conflict
"  G->[ = Jump to previous conflict
"  G->o = Choose ours from the current conflict
"  G->t = Choose theirs from the current conflict
"  G->l = Populate and open quickfix with conflicts
"  G->y = Yank the github url
nnoremap <leader>Gb  :BlameToggle<CR>
nnoremap <leader>Gn  :Gitsigns next_hunk<CR>
nnoremap <leader>GN  :Gitsigns prev_hunk<CR>
nnoremap <leader>Gv  :Gitsigns preview_hunk<CR>
nnoremap <leader>Gr  :Gitsigns reset_hunk<CR>
nnoremap <leader>Ga  :Gitsigns stage_hunk<CR>
nnoremap <leader>Gl  :GitConflictListQf<CR>
nnoremap <leader>G]  :GitConflictNextConflict<CR>
nnoremap <leader>G[  :GitConflictPrevConflict<CR>
nnoremap <leader>Go  :GitConflictChooseOurs<CR>
nnoremap <leader>Gt  :GitConflictChooseTheirs<CR>
" nnoremap <leader>Gy  :YankGithubUrlN<CR> === SET IN gitlinker config

" --- H --- Help
"  prime = LSP hover help
"  H->l = get info about current LSP state
nnoremap <leader>h  :LspHover<CR>
nnoremap <leader>Hl  :LspInfo<CR>

" --- I --- Insert
"  prime = Insert snippet
"  Can also use C-I in insert mode
nnoremap <leader>i  :Telescope luasnip<CR>

" --- J --- Jump
"  prime = Open buffer jump dialog
"  subprime = Jump to definition using the language server
"  J->d = Jump to declaration using the language server
"  J->r = Jump references using language server
"  J->m = Jump to marks
"  J->s = Jump to snippets file for this buffer (via a menu)
"  J->q = Jump to quickfix
nnoremap <leader>j :Telescope buffers<cr>
nnoremap <silent> <leader><C-J> :LspJumpDecl<CR>
nnoremap <silent> <leader>Jd :Telescope lsp_definitions<CR>
nnoremap <leader>Jr :Telescope lsp_references<cr>
nnoremap <leader>Jm :Telescope marks<cr>
nnoremap <leader>Jq :copen<CR>

" --- L --- Load
"  prime = use Telescope to look for files to load in the current directory
"  subprime = use Telescope to look for files to load in the home directory
"  L->h = load all headers in the current directory
"  L->p = load all .py in the current directory
"  L->c = load all .c/.cc/.cpp/.h/.hpp files in the current directory
"  L->n = load a new empty buffer
"  L->s = load a snippets file for the current buffer (provides a set of menus)
nnoremap <leader>l :Telescope find_files<cr>
nnoremap <leader><C-l> :Telescope find_files search_dirs=~<cr>
" using "next" on joined list rather than argdo because argdo disables syntax
" autocmd for Syntax when it si running
nnoremap <leader>Ln :enew<cr>
nnoremap <leader>Ls :EditSnippetFiles<cr>

" --- O --- Outline/Overview
"  prime = open outline
"  subprime = open the folder that contains the current document
nnoremap <silent> <leader>o :AerialToggle<cr>
nnoremap <silent> <leader><C-O> :Telescope file_browser path=%:p:h select_buffer=true<CR>

" --- Q --- Quit
"  prime = quit
"  subprime = force quit
"  Q->b = drop the current buffer
"  G->a = drop all buffers
nnoremap <leader>q :q<cr>
nnoremap <leader><C-Q> :q!<cr>
nnoremap <leader>Qb :bd<cr>
nnoremap <leader>Qa :silent bufdo bd<cr>

" --- R --- Replace/Repair/Refactor
"  prime = start find and replace
"  prime-visual = start find and replace bounded by visual selection
"  subprime = fixit
"  R->s = perform a sort on the selected lines
nnoremap <leader>r viw"ry<cr>:%snomagic/<c-r>r//gc<Left><Left><Left>a<bs>
vnoremap <leader>r :snomagic///gc<Left><Left><Left><Left>
nnoremap <leader><C-r> :ApplyCodeAction<CR>
vnoremap <leader>Rg "ry/<C-r>r<cr>:exe "Grep " . shellescape(fnameescape(getreg("r")))<cr>
vnoremap <leader>Rs  :sort<CR>

" --- S --- Split
"  prime = split vertically
"  subprime = split horizontally
"  S->s = swap the current split with the one to its right
nnoremap <leader>s :vsplit<cr>
nnoremap <leader><C-S> :split<cr>
nnoremap <leader>Ss <C-W><C-X><cr>


" --- V --- Visualize (Display related actions)
"  prime = UNDEFINED
"  subprime = UNDEFINED
"  V->n = toggle line numbers display
"  V->c = use telescope to search for a color profile to load
"  V->d = toggle display of diagnostic as virtual text
"  V->h = Toggle highlighting of color codes
"  V->i = Toggle inlay hints
"  V->g = Toggle git gutter display
"  V->k = Searchable keymaps with telescope
"  V->w = Toggle whitespace display
nnoremap <leader>Vn :set number!<cr>
nnoremap <leader>Vc :Telescope colorscheme<cr>
nnoremap <leader>Vd :Telescope colorscheme<cr>
nnoremap <leader>Vh :HighlightColors Toggle<cr>
nnoremap <leader>Vi :ToggleInlayHints<cr>
nnoremap <leader>Vg :Gitsigns toggle_signs<cr>
nnoremap <leader>Vk :Telescope keymaps<cr>
nnoremap <leader>Vw :set list!<cr>
:
" --- W --- Write
"  prime = write current buffer
nnoremap <leader>w :w<cr>

" load a work specific vimrc if applicable
call SourceIfExists("~/.config-work/vimrc")
" run lua init script if we are running neovim
if nvim
  set runtimepath+=~/config/vim/nvim
  source ~/config/vim/nvim/lua/init.lua
endif


